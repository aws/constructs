# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: release-3.x
on:
  push:
    branches:
      - 3.x
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: ${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config --global init.defaultBranch main
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 12.22.0
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release:3.x
        run: npx projen release:3.x
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::"$(git ls-remote origin -h ${{
          github.ref }} | cut -f1)"
      - name: Upload artifact
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R
          $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt)
          --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode
          -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then
          cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
  release_npm:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Extract npm tarball
        run: |-
          tar -xzf dist/js/*.tgz --strip-components=1
          rm -fr dist/js
      - name: Create js artifact
        run: >-
          jsii_version=$(node -p
          "JSON.parse(fs.readFileSync('.jsii')).jsiiVersion.split(' ')[0]")

          npx jsii-pacmak@$jsii_version -v --outdir $PWD/dist --target js
      - name: Release
        run: npx -p jsii-release@latest jsii-release-npm
        env:
          NPM_DIST_TAG: latest-3
          NPM_REGISTRY: registry.npmjs.org
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  release_maven:
    name: Publish to Maven Central
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 11.x
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Extract npm tarball
        run: |-
          tar -xzf dist/js/*.tgz --strip-components=1
          rm -fr dist/js
      - name: Create java artifact
        run: >-
          jsii_version=$(node -p
          "JSON.parse(fs.readFileSync('.jsii')).jsiiVersion.split(' ')[0]")

          npx jsii-pacmak@$jsii_version -v --outdir $PWD/dist --target java
      - name: Release
        run: npx -p jsii-release@latest jsii-release-maven
        env:
          MAVEN_ENDPOINT: https://s01.oss.sonatype.org
          MAVEN_GPG_PRIVATE_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          MAVEN_GPG_PRIVATE_KEY_PASSPHRASE: ${{ secrets.MAVEN_GPG_PRIVATE_KEY_PASSPHRASE }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_STAGING_PROFILE_ID: ${{ secrets.CONSTRUCTS_MAVEN_STAGING_PROFILE_ID }}
  release_pypi:
    name: Publish to PyPI
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Extract npm tarball
        run: |-
          tar -xzf dist/js/*.tgz --strip-components=1
          rm -fr dist/js
      - name: Create python artifact
        run: >-
          jsii_version=$(node -p
          "JSON.parse(fs.readFileSync('.jsii')).jsiiVersion.split(' ')[0]")

          npx jsii-pacmak@$jsii_version -v --outdir $PWD/dist --target python
      - name: Release
        run: npx -p jsii-release@latest jsii-release-pypi
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
  release_nuget:
    name: Publish to NuGet Gallery
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.x
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Extract npm tarball
        run: |-
          tar -xzf dist/js/*.tgz --strip-components=1
          rm -fr dist/js
      - name: Create dotnet artifact
        run: >-
          jsii_version=$(node -p
          "JSON.parse(fs.readFileSync('.jsii')).jsiiVersion.split(' ')[0]")

          npx jsii-pacmak@$jsii_version -v --outdir $PWD/dist --target dotnet
      - name: Release
        run: npx -p jsii-release@latest jsii-release-nuget
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
  release_golang:
    name: Publish to GitHub Go Module Repository
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - uses: actions/setup-go@v2
        with:
          go-version: ^1.16.0
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Extract npm tarball
        run: |-
          tar -xzf dist/js/*.tgz --strip-components=1
          rm -fr dist/js
      - name: Create go artifact
        run: >-
          jsii_version=$(node -p
          "JSON.parse(fs.readFileSync('.jsii')).jsiiVersion.split(' ')[0]")

          npx jsii-pacmak@$jsii_version -v --outdir $PWD/dist --target go
      - name: Release
        run: npx -p jsii-release@latest jsii-release-golang
        env:
          GIT_USER_NAME: AWS CDK Team
          GIT_USER_EMAIL: aws-cdk-dev@amazon.com
          GITHUB_TOKEN: ${{ secrets.GO_GITHUB_TOKEN }}
