# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name "Automation"
          git config user.email "github-actions@github.com"
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 10.17.0
      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::"$(git ls-remote origin -h ${{
          github.ref }} | cut -f1)"
      - name: Create release
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: gh release create v$(cat dist/version.txt) -F dist/changelog.md -t v$(cat
          dist/version.txt)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
    container:
      image: jsii/superchain
  release_npm:
    name: Release to npm
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-npm
        env:
          NPM_DIST_TAG: latest
          NPM_REGISTRY: registry.npmjs.org
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    container:
      image: jsii/superchain
  release_maven:
    name: Release to Maven
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-maven
        env:
          MAVEN_GPG_PRIVATE_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          MAVEN_GPG_PRIVATE_KEY_PASSPHRASE: ${{ secrets.MAVEN_GPG_PRIVATE_KEY_PASSPHRASE }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_STAGING_PROFILE_ID: ${{ secrets.MAVEN_STAGING_PROFILE_ID }}
    container:
      image: jsii/superchain
  release_pypi:
    name: Release to PyPI
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-pypi
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
    container:
      image: jsii/superchain
  release_nuget:
    name: Release to NuGet
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-nuget
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    container:
      image: jsii/superchain
  release_golang:
    name: Release to Go
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-golang
        env:
          GIT_USER_NAME: AWS CDK Team
          GIT_USER_EMAIL: aws-cdk-dev@amazon.com
          GITHUB_TOKEN: ${{ secrets.GO_GITHUB_TOKEN }}
    container:
      image: jsii/superchain
